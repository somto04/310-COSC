import pytest
from fastapi.testclient import TestClient
from app.app import app
from app.routers import replyRoute

# Mock authentication (so "Not authenticated" doesn't block tests)
app.dependency_overrides[replyRoute.getCurrentUser] = lambda: {"id": 1, "username": "tester"}

client = TestClient(app)


# Mock data for replies
mock_replies = [
    {
        "id": "1",
        "reviewId": "10",
        "userId": 50001,
        "replyBody": "Totally agree with your point!",
        "datePosted": "28 Oct 2025"
    },
    {
        "id": "2",
        "reviewId": "10",
        "userId": 50002,
        "replyBody": "I think it was overhyped.",
        "datePosted": "28 Oct 2025"
    },
]

#testing get replies for a review by mocking the service layer
def test_get_replies_with_mock_data(monkeypatch):
    """GET /replies/{reviewId} returns all replies for that review."""
    def mock_listRepliesForReview(reviewId: str):
        return [r for r in mock_replies if r["reviewId"] == reviewId]
    
    #monkeypatch does dependency injection to replace the real service function with our mock
    monkeypatch.setattr("app.services.replyService.listRepliesForReview", mock_listRepliesForReview)

    response = client.get("/replies/10")
    data = response.json()

    # assertions
    assert response.status_code == 200
    assert len(data) == 2
    assert data[0]["replyBody"] == "Totally agree with your point!"
    assert data[1]["replyBody"] == "I think it was overhyped."


#testing post reply by mocking the service layer
def test_post_reply_with_mock_data(monkeypatch):
    """POST /replies creates a new reply and returns it."""
    class DummyReply:
        def __init__(self):
            self.id = "3"
            self.reviewId = "10"
            self.userId = 50003
            self.replyBody = "Nice discussion here!"
            self.datePosted = "28 Oct 2025"
    
    # monkeypatch the createReply function to return a dummy reply
    def mock_createReply(payload):
        # simulate saving new reply
        return DummyReply()

    # monkeypatch the service function
    monkeypatch.setattr("app.services.replyService.createReply", mock_createReply)
    
    # make the POST request
    response = client.post(
        "/replies",
        json={
            "reviewId": "10",
            "userId": 50003,
            "replyBody": "Nice discussion here!"
        },
    )

    data = response.json()

    assert response.status_code == 200
    assert data["reviewId"] == "10"
    assert data["replyBody"] == "Nice discussion here!"
    assert data["userId"] == 50003
